import com.sun.management.HotSpotDiagnosticMXBean

import java.lang.management.ManagementFactory

buildscript {
    repositories {
        google()
        mavenCentral()
        maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
    }
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.20")
        // see https://developer.android.com/studio/releases/gradle-plugin
        // see https://maven.google.com/web/index.html?#com.android.tools.build:gradle
        classpath("com.android.tools.build:gradle:8.0.0-rc01")
        // classpath("com.android.tools.build:gradle:7.4.2")
        // Compatible with 7.4+
        // classpath("com.android.tools.build:gradle:7.3.0-rc01")
        // Compatible with 7.3.3+
        // classpath("com.android.tools.build:gradle:7.2.2")
        // Compatible with 7.2+
        // classpath("com.android.tools.build:gradle:7.1.3")
        // Compatible with 7.0+
        // classpath("com.android.tools.build:gradle:7.0.1")
    }
}

plugins {
}

allprojects {
    repositories {
        // maven { url 'https://nowhere.local' }
        google()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
     }
}

println "USING GRADLE VERSION $gradle.gradleVersion"

gradle.buildFinished {
//    println "DUMP HEAP"
//    def server = ManagementFactory.getPlatformMBeanServer()
//    def mxBean = ManagementFactory.newPlatformMXBeanProxy(server, "com.sun.management:type=HotSpotDiagnostic", HotSpotDiagnosticMXBean.class)
//    mxBean.dumpHeap(file("heap.hprof").absolutePath, true)
//    println "WAITING ...."
//    Thread.sleep(10 * 60 * 1000)
}